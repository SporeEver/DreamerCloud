import React, { useState } from 'react';
import { Heart, MessageCircle, Clock, Tag, Palette, Eye, Download, Brain, Zap, Sparkles, Share2, FileText } from 'lucide-react';
import { Dream } from '../../types';
import { useDreams } from '../../hooks/useDreams';
import { useAuth } from '../../hooks/useAuth';
import DreamAnalysis from './DreamAnalysis';
import DreamShareExport from './DreamShareExport';

interface DreamCardProps {
  dream: Dream;
  onClick?: () => void;
  showAnalysis?: boolean;
}

const DreamCard: React.FC<DreamCardProps> = ({ dream, onClick, showAnalysis = true }) => {
  const { user } = useAuth();
  const [imageError, setImageError] = useState(false);
  const [showFullImage, setShowFullImage] = useState(false);
  const [showShareExport, setShowShareExport] = useState(false);
  const { updateDream } = useDreams();

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 1) return 'Yesterday';
    if (diffDays < 7) return `${diffDays} days ago`;
    return date.toLocaleDateString();
  };

  const getMoodColor = (mood: Dream['mood']) => {
    const colors = {
      peaceful: 'bg-green-500/20 text-green-300',
      exciting: 'bg-orange-500/20 text-orange-300',
      scary: 'bg-red-500/20 text-red-300',
      strange: 'bg-purple-500/20 text-purple-300',
      romantic: 'bg-pink-500/20 text-pink-300',
      sad: 'bg-blue-500/20 text-blue-300',
    };
    return colors[mood] || colors.peaceful;
  };

  const handleImageDownload = async (e: React.MouseEvent) => {
    e.stopPropagation();
    if (!dream.generatedImage) return;
    
    try {
      const response = await fetch(dream.generatedImage);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `dream-art-${dream.title.replace(/\s+/g, '-').toLowerCase()}.png`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Error downloading image:', error);
    }
  };

  const handleAnalysisUpdate = (analysis: string) => {
    updateDream(dream.id, { 
      aiAnalysis: analysis,
      analysisCreatedAt: new Date().toISOString()
    });
  };

  const handleShareExport = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowShareExport(true);
  };

  // Determine if image was generated by Replicate/FLUX.1
  const isReplicateGenerated = dream.imagePrompt && (
    dream.imagePrompt.includes('FLUX') || 
    dream.imagePrompt.includes('high quality') ||
    dream.imagePrompt.includes('masterpiece') ||
    dream.imagePrompt.includes('8k resolution')
  );

  // Check if user owns this dream for analysis and sharing
  const canAnalyze = user && dream.userId === user.id;
  const canShare = user && dream.userId === user.id;

  return (
    <>
      <div
        className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6 hover:bg-gray-800/70 transition-all duration-300 cursor-pointer hover:border-purple-500/30 hover:shadow-lg hover:shadow-purple-500/10"
        onClick={onClick}
      >
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center">
              <span className="text-white text-sm font-bold">
                {dream.username.charAt(0).toUpperCase()}
              </span>
            </div>
            <div>
              <h3 className="text-white font-semibold">{dream.username}</h3>
              <div className="flex items-center space-x-1 text-gray-400 text-sm">
                <Clock className="h-3 w-3" />
                <span>{formatDate(dream.createdAt)}</span>
              </div>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            {dream.generatedImage && (
              <div className="flex items-center space-x-1 px-2 py-1 bg-gradient-to-r from-purple-500/20 to-pink-500/20 text-purple-300 rounded-full text-xs">
                <Palette className="h-3 w-3" />
                <span>{isReplicateGenerated ? 'Custom FLUX.1' : 'AI Art'}</span>
              </div>
            )}
            {dream.aiAnalysis && (
              <div className="flex items-center space-x-1 px-2 py-1 bg-gradient-to-r from-blue-500/20 to-purple-500/20 text-blue-300 rounded-full text-xs">
                <Brain className="h-3 w-3" />
                <span>Analyzed</span>
              </div>
            )}
            <div className={`px-3 py-1 rounded-full text-xs font-medium ${getMoodColor(dream.mood)}`}>
              {dream.mood}
            </div>
          </div>
        </div>

        {/* Generated Image */}
        {dream.generatedImage && !imageError && (
          <div className="mb-4 relative group">
            <img
              src={dream.generatedImage}
              alt={`AI generated art for: ${dream.title}`}
              className="w-full h-48 object-cover rounded-lg border border-gray-600 cursor-pointer hover:border-purple-500/50 transition-colors"
              onError={() => setImageError(true)}
              onClick={(e) => {
                e.stopPropagation();
                setShowFullImage(true);
              }}
            />
            <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center space-x-2">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  setShowFullImage(true);
                }}
                className="p-2 bg-white/20 hover:bg-white/30 text-white rounded-lg transition-colors"
                title="View full image"
              >
                <Eye className="h-4 w-4" />
              </button>
              <button
                onClick={handleImageDownload}
                className="p-2 bg-white/20 hover:bg-white/30 text-white rounded-lg transition-colors"
                title="Download image"
              >
                <Download className="h-4 w-4" />
              </button>
            </div>
            {dream.imagePrompt && (
              <div className="mt-2 p-2 bg-gray-700/30 border border-gray-600/50 rounded text-xs text-gray-400">
                <div className="flex items-center space-x-1 mb-1">
                  {isReplicateGenerated && <Zap className="h-3 w-3 text-blue-400" />}
                  <span className="font-medium text-purple-300">
                    {isReplicateGenerated ? 'Custom FLUX.1 Prompt:' : 'AI Prompt:'}
                  </span>
                </div>
                <p className="line-clamp-2">{dream.imagePrompt}</p>
              </div>
            )}
          </div>
        )}

        {/* Content */}
        <div className="mb-4">
          <h2 className="text-xl font-bold text-white mb-2">{dream.title}</h2>
          <p className="text-gray-300 leading-relaxed line-clamp-3">
            {dream.content}
          </p>
        </div>

        {/* Tags */}
        {dream.tags.length > 0 && (
          <div className="flex flex-wrap gap-2 mb-4">
            {dream.tags.slice(0, 4).map((tag, index) => (
              <span
                key={index}
                className="inline-flex items-center space-x-1 px-2 py-1 bg-gray-700/50 text-gray-300 text-xs rounded-full"
              >
                <Tag className="h-3 w-3" />
                <span>{tag}</span>
              </span>
            ))}
            {dream.tags.length > 4 && (
              <span className="px-2 py-1 bg-gray-700/50 text-gray-400 text-xs rounded-full">
                +{dream.tags.length - 4} more
              </span>
            )}
          </div>
        )}

        {/* Dream Analysis */}
        {showAnalysis && canAnalyze && (
          <div className="mb-4" onClick={(e) => e.stopPropagation()}>
            <DreamAnalysis
              dreamId={dream.id}
              dreamText={dream.content}
              dreamMood={dream.mood}
              dreamTags={dream.tags}
              existingAnalysis={dream.aiAnalysis}
              onAnalysisUpdate={handleAnalysisUpdate}
              userId={user?.id}
            />
          </div>
        )}

        {/* Analysis Available for Others */}
        {showAnalysis && !canAnalyze && dream.aiAnalysis && (
          <div className="mb-4 p-4 bg-gradient-to-r from-purple-500/10 to-blue-500/10 border border-purple-500/20 rounded-lg">
            <div className="flex items-center space-x-2 mb-2">
              <Brain className="h-4 w-4 text-purple-400" />
              <span className="text-purple-300 font-medium text-sm">AI Analysis Available</span>
              <Sparkles className="h-3 w-3 text-purple-400" />
            </div>
            <p className="text-gray-400 text-sm">
              This dream has been analyzed by AI. The dreamer can view detailed psychological insights and symbolic interpretations.
            </p>
          </div>
        )}

        {/* Engagement */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-6">
            <button className="flex items-center space-x-1 text-gray-400 hover:text-red-400 transition-colors">
              <Heart className="h-4 w-4" />
              <span className="text-sm">{dream.likes}</span>
            </button>
            <button className="flex items-center space-x-1 text-gray-400 hover:text-blue-400 transition-colors">
              <MessageCircle className="h-4 w-4" />
              <span className="text-sm">{dream.comments}</span>
            </button>
          </div>
          
          {/* Share & Export Actions */}
          {canShare && (
            <button
              onClick={handleShareExport}
              className="flex items-center space-x-1 px-3 py-1 bg-purple-600/20 hover:bg-purple-600/30 text-purple-300 rounded-lg text-sm font-medium transition-colors"
            >
              <Share2 className="h-3 w-3" />
              <span>Share</span>
            </button>
          )}
        </div>
      </div>

      {/* Full Image Modal */}
      {showFullImage && dream.generatedImage && (
        <div 
          className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={() => setShowFullImage(false)}
        >
          <div className="relative max-w-4xl max-h-[90vh] w-full">
            <img
              src={dream.generatedImage}
              alt={`AI generated art for: ${dream.title}`}
              className="w-full h-full object-contain rounded-lg"
              onClick={(e) => e.stopPropagation()}
            />
            <button
              onClick={() => setShowFullImage(false)}
              className="absolute top-4 right-4 p-2 bg-black/50 hover:bg-black/70 text-white rounded-lg transition-colors"
            >
              ×
            </button>
            <div className="absolute bottom-4 left-4 right-4 bg-black/70 backdrop-blur-sm rounded-lg p-4">
              <h3 className="text-white font-semibold mb-1">{dream.title}</h3>
              {dream.imagePrompt && (
                <div className="text-gray-300 text-sm">
                  <div className="flex items-center space-x-1 mb-1">
                    {isReplicateGenerated && <Zap className="h-3 w-3 text-blue-400" />}
                    <span className="text-purple-300 font-medium">
                      {isReplicateGenerated ? 'Custom FLUX.1 Prompt:' : 'AI Prompt:'}
                    </span>
                  </div>
                  <p>{dream.imagePrompt}</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Share & Export Modal */}
      {showShareExport && canShare && user && (
        <DreamShareExport
          dream={dream}
          userId={user.id}
          onClose={() => setShowShareExport(false)}
        />
      )}
    </>
  );
};

export default DreamCard;